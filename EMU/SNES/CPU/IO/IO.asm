//----------------------
// I/O Load Subroutines
//----------------------
LoadByte:
  srl t1,t0,8     // T1 = Offset >> 8
  ori t2,r0,$21   // T2 = $21
  bne t1,t2,LoadByte42XX // IF (T1 != $21) Load Byte $42XX
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,LOAD21XX  // A3 = Load I/O $21XX Indirect Table
  addu a3,t0      // A3 = Load I/O $21XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Load I/O $21XX Table Offset
  jalr gp,t0      // Run Load I/O $21XX Instruction
  nop // Delay Slot

  LoadByte42XX:
  ori t2,r0,$42   // T2 = $42
  bne t1,t2,LoadByteEnd // IF (T1 != $42) Load Byte End
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,LOAD42XX  // A3 = Load I/O $42XX Indirect Table
  addu a3,t0      // A3 = Load I/O $42XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Load I/O $42XX Table Offset
  jalr k1,t0      // Run Load I/O $42XX Instruction
  nop // Delay Slot

  LoadByteEnd:
    jr sp
    nop // Delay Slot

LoadWord:
  srl t1,t0,8     // T1 = Offset >> 8
  ori t2,r0,$21   // T2 = $21
  bne t1,t2,LoadWord42XX // IF (T1 != $21) Load Word $41XX
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,LOAD21XX  // A3 = Load I/O $21XX Indirect Table
  addu a3,t0      // A3 = Load I/O $21XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Load I/O $21XX Table Offset
  jalr gp,t0      // Run Load I/O $21XX Instruction
  nop             // Delay Slot
  lw t0,4(a3)     // T0 = Load I/O $21XX Table Offset
  jalr gp,t0      // Run Load I/O $21XX Instruction
  nop // Delay Slot

  LoadWord42XX:
  ori t2,r0,$42   // T2 = $42
  bne t1,t2,LoadWordEnd // IF (T1 != $42) Load Word End
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,LOAD42XX  // A3 = Load I/O $42XX Indirect Table
  addu a3,t0      // A3 = Load I/O $42XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Load I/O $42XX Table Offset
  jalr k1,t0      // Run Load I/O $42XX Instruction
  nop             // Delay Slot
  lw t0,4(a3)     // T0 = Load I/O $42XX Table Offset
  jalr k1,t0      // Run Load I/O $42XX Instruction
  nop // Delay Slot

  LoadWordEnd:
    jr sp
    nop // Delay Slot

//-----------------------
// I/O Store Subroutines
//-----------------------
StoreByte:
  srl t1,t0,8     // T1 = Offset >> 8
  ori t2,r0,$21   // T2 = $21
  bne t1,t2,StoreByte42XX // IF (T1 != $21) Store Byte $42XX
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,STORE21XX // A3 = Store I/O $21XX Indirect Table
  addu a3,t0      // A3 = Store I/O $21XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Store I/O $21XX Table Offset
  jalr gp,t0      // Run Store I/O $21XX Instruction
  nop // Delay Slot

  StoreByte42XX:
  ori t2,r0,$42   // T2 = $42
  bne t1,t2,StoreByteEnd // IF (T1 != $42) Store Byte End
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,STORE42XX // A3 = Store I/O $42XX Indirect Table
  addu a3,t0      // A3 = Store I/O $42XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Store I/O $42XX Table Offset
  jalr k1,t0      // Run Store I/O $42XX Instruction
  nop // Delay Slot

  StoreByteEnd:
    jr sp
    nop // Delay Slot

StoreWord:
  srl t1,t0,8     // T1 = Offset >> 8
  ori t2,r0,$21   // T2 = $21
  bne t1,t2,StoreWord42XX // IF (T1 != $21) Store Word $41XX
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,STORE21XX // A3 = Store I/O $21XX Indirect Table
  addu a3,t0      // A3 = Store I/O $21XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Store I/O $21XX Table Offset
  jalr gp,t0      // Run Store I/O $21XX Instruction
  nop             // Delay Slot
  lw t0,4(a3)     // T0 = Store I/O $21XX Table Offset
  jalr gp,t0      // Run Store I/O $21XX Instruction
  nop // Delay Slot

  StoreWord42XX:
  ori t2,r0,$42   // T2 = $42
  bne t1,t2,StoreWordEnd // IF (T1 != $42) Store Word End
  andi t0,$FF     // Offset &= $FF (Delay Slot)
  sll t0,2        // Offset *= 4 (Indirect Table Offset)
  la a3,STORE42XX // A3 = Store I/O $42XX Indirect Table
  addu a3,t0      // A3 = Store I/O $42XX Indirect Table Offset
  lw t0,0(a3)     // T0 = Store I/O $42XX Table Offset
  jalr k1,t0      // Run Store I/O $42XX Instruction
  nop             // Delay Slot
  lw t0,4(a3)     // T0 = Store I/O $42XX Table Offset
  jalr k1,t0      // Run Store I/O $42XX Instruction
  nop // Delay Slot

  StoreWordEnd:
    jr sp
    nop // Delay Slot

LOAD21XX:
// Load I/O $21XX Indirect Table
dw LOAD2100, LOAD2101, LOAD2102, LOAD2103, LOAD2104, LOAD2105, LOAD2106, LOAD2107, LOAD2108, LOAD2109, LOAD210A, LOAD210B, LOAD210C, LOAD210D, LOAD210E, LOAD210F
dw LOAD2110, LOAD2111, LOAD2112, LOAD2113, LOAD2114, LOAD2115, LOAD2116, LOAD2117, LOAD2118, LOAD2119, LOAD211A, LOAD211B, LOAD211C, LOAD211D, LOAD211E, LOAD211F
dw LOAD2120, LOAD2121, LOAD2122, LOAD2123, LOAD2124, LOAD2125, LOAD2126, LOAD2127, LOAD2128, LOAD2129, LOAD212A, LOAD212B, LOAD212C, LOAD212D, LOAD212E, LOAD212F
dw LOAD2130, LOAD2131, LOAD2132, LOAD2133, LOAD2134, LOAD2135, LOAD2136, LOAD2137, LOAD2138, LOAD2139, LOAD213A, LOAD213B, LOAD213C, LOAD213D, LOAD213E, LOAD213F
dw LOAD2140, LOAD2141, LOAD2142, LOAD2143, LOAD2144, LOAD2145, LOAD2146, LOAD2147, LOAD2148, LOAD2149, LOAD214A, LOAD214B, LOAD214C, LOAD214D, LOAD214E, LOAD214F
dw LOAD2150, LOAD2151, LOAD2152, LOAD2153, LOAD2154, LOAD2155, LOAD2156, LOAD2157, LOAD2158, LOAD2159, LOAD215A, LOAD215B, LOAD215C, LOAD215D, LOAD215E, LOAD215F
dw LOAD2160, LOAD2161, LOAD2162, LOAD2163, LOAD2164, LOAD2165, LOAD2166, LOAD2167, LOAD2168, LOAD2169, LOAD216A, LOAD216B, LOAD216C, LOAD216D, LOAD216E, LOAD216F
dw LOAD2170, LOAD2171, LOAD2172, LOAD2173, LOAD2174, LOAD2175, LOAD2176, LOAD2177, LOAD2178, LOAD2179, LOAD217A, LOAD217B, LOAD217C, LOAD217D, LOAD217E, LOAD217F
dw LOAD2180, LOAD2181, LOAD2182, LOAD2183, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184
dw LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184, LOAD2184

LOAD42XX:
// Load I/O $42XX Indirect Table
dw LOAD4200, LOAD4201, LOAD4202, LOAD4203, LOAD4204, LOAD4205, LOAD4206, LOAD4207, LOAD4208, LOAD4209, LOAD420A, LOAD420B, LOAD420C, LOAD420D, LOAD420E, LOAD420F
dw LOAD4210, LOAD4211, LOAD4212, LOAD4213, LOAD4214, LOAD4215, LOAD4216, LOAD4217, LOAD4218, LOAD4219, LOAD421A, LOAD421B, LOAD421C, LOAD421D, LOAD421E, LOAD421F
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220
dw LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220, LOAD4220

STORE21XX:
// Store I/O $21XX Indirect Table
dw STORE2100, STORE2101, STORE2102, STORE2103, STORE2104, STORE2105, STORE2106, STORE2107, STORE2108, STORE2109, STORE210A, STORE210B, STORE210C, STORE210D, STORE210E, STORE210F
dw STORE2110, STORE2111, STORE2112, STORE2113, STORE2114, STORE2115, STORE2116, STORE2117, STORE2118, STORE2119, STORE211A, STORE211B, STORE211C, STORE211D, STORE211E, STORE211F
dw STORE2120, STORE2121, STORE2122, STORE2123, STORE2124, STORE2125, STORE2126, STORE2127, STORE2128, STORE2129, STORE212A, STORE212B, STORE212C, STORE212D, STORE212E, STORE212F
dw STORE2130, STORE2131, STORE2132, STORE2133, STORE2134, STORE2135, STORE2136, STORE2137, STORE2138, STORE2139, STORE213A, STORE213B, STORE213C, STORE213D, STORE213E, STORE213F
dw STORE2140, STORE2141, STORE2142, STORE2143, STORE2144, STORE2145, STORE2146, STORE2147, STORE2148, STORE2149, STORE214A, STORE214B, STORE214C, STORE214D, STORE214E, STORE214F
dw STORE2150, STORE2151, STORE2152, STORE2153, STORE2154, STORE2155, STORE2156, STORE2157, STORE2158, STORE2159, STORE215A, STORE215B, STORE215C, STORE215D, STORE215E, STORE215F
dw STORE2160, STORE2161, STORE2162, STORE2163, STORE2164, STORE2165, STORE2166, STORE2167, STORE2168, STORE2169, STORE216A, STORE216B, STORE216C, STORE216D, STORE216E, STORE216F
dw STORE2170, STORE2171, STORE2172, STORE2173, STORE2174, STORE2175, STORE2176, STORE2177, STORE2178, STORE2179, STORE217A, STORE217B, STORE217C, STORE217D, STORE217E, STORE217F
dw STORE2180, STORE2181, STORE2182, STORE2183, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184
dw STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184, STORE2184

STORE42XX:
// Store I/O $42XX Indirect Table
dw STORE4200, STORE4201, STORE4202, STORE4203, STORE4204, STORE4205, STORE4206, STORE4207, STORE4208, STORE4209, STORE420A, STORE420B, STORE420C, STORE420D, STORE420E, STORE420F
dw STORE4210, STORE4211, STORE4212, STORE4213, STORE4214, STORE4215, STORE4216, STORE4217, STORE4218, STORE4219, STORE421A, STORE421B, STORE421C, STORE421D, STORE421E, STORE421F
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220
dw STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220, STORE4220

include "LOAD21XX.asm" // Load I/O $21XX Table
include "LOAD42XX.asm" // Load I/O $42XX Table

include "STORE21XX.asm" // Store I/O $21XX Table
include "STORE42XX.asm" // Store I/O $42XX Table

//------------------------
// I/O 21XX Shadow Memory
//------------------------
INIDISP: // $2100 REG_INIDISP           Display Control 1                                    1B/W
  db 0   // INIDISP

OBSEL:   // $2101 REG_OBSEL             Object Size & Object Base                            1B/W
  db 0   // OBSEL

align(2)
OAMADD:  // $2102/$2103 REG_OAMADDL/H   OAM Address (Lower/Upper 8bit)                       2B/W
  dh 0   // OAMADD

align(2)
OAMDATA: // $2104 REG_OAMDATA           OAM Data Write                                       1B/W D
  dh 0   // OAMDATA
  db 0   // OAMDATA Flip Flop (0 = Lo Byte, 1 = Hi Byte)

BGMODE:  // $2105 REG_BGMODE            BG Mode and BG Character Size                        1B/W
  db 0   // BGMODE

MOSAIC:  // $2106 REG_MOSAIC            Mosaic Size and Mosaic Enable                        1B/W
  db 0   // MOSAIC

BG1SC:   // $2107 REG_BG1SC             BG1 Screen Base & Screen Size                        1B/W
  db 0   // BG1SC

BG2SC:   // $2108 REG_BG2SC             BG2 Screen Base & Screen Size                        1B/W
  db 0   // BG2SC

BG3SC:   // $2109 REG_BG3SC             BG3 Screen Base & Screen Size                        1B/W
  db 0   // BG3SC

BG4SC:   // $210A REG_BG4SC             BG4 Screen Base & Screen Size                        1B/W
  db 0   // BG4SC

BG12NBA: // $210B REG_BG12NBA           BG Character Data Area Designation                   1B/W
  db 0   // BG12NBA

BG34NBA: // $210C REG_BG34NBA           BG Character Data Area Designation                   1B/W
  db 0   // BG34NBA

align(2)
BG1HOFS: // $210D REG_BG1HOFS           BG1 Horizontal Scroll (X) / M7HOFS                   1B/W D
  dh 0   // BG1HOFS
  db 0   // BG1HOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG1VOFS: // $210E REG_BG1VOFS           BG1 Vertical   Scroll (Y) / M7VOFS                   1B/W D
  dh 0   // BG1VOFS
  db 0   // BG1VOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG2HOFS: // $210F REG_BG2HOFS           BG2 Horizontal Scroll (X)                            1B/W D
  dh 0   // BG2HOFS
  db 0   // BG2HOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG2VOFS: // $2110 REG_BG2VOFS           BG2 Vertical   Scroll (Y)                            1B/W D
  dh 0   // BG2VOFS
  db 0   // BG2VOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG3HOFS: // $2111 REG_BG3HOFS           BG3 Horizontal Scroll (X)                            1B/W D
  dh 0   // BG3HOFS
  db 0   // BG3HOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG3VOFS: // $2112 REG_BG3VOFS           BG3 Vertical   Scroll (Y)                            1B/W D
  dh 0   // BG3VOFS
  db 0   // BG3VOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG4HOFS: // $2113 REG_BG4HOFS           BG4 Horizontal Scroll (X)                            1B/W D
  dh 0   // BG4HOFS
  db 0   // BG4HOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
BG4VOFS: // $2114 REG_BG4VOFS           BG4 Vertical   Scroll (Y)                            1B/W D
  dh 0   // BG4VOFS
  db 0   // BG4VOFS Flip Flop (0 = Lo Byte, 1 = Hi Byte)

VMAIN:   // $2115 REG_VMAIN             VRAM Address Increment Mode                          1B/W
  db 0   // VMAIN

align(2)
VMADD:   // $2116/$2117 REG_VMADDL/H    VRAM Address    (Lower/Upper 8bit)                   2B/W
  dh 0   // VMADD

align(2)
VMDATA:  // $2118/$2119 REG_VMDATAL/H   VRAM Data Write (Lower/Upper 8bit)                   2B/W
  dh 0   // VMDATA

M7SEL:   // $211A REG_M7SEL             MODE7 Rot/Scale Mode Settings                        1B/W
  db 0   // M7SEL

align(2)
M7A:     // $211B REG_M7A               MODE7 Rot/Scale A (COSINE A) & Maths 16bit Operand   1B/W D
  dh 0   // M7A
  db 0   // M7A Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
M7B:     // $211C REG_M7B               MODE7 Rot/Scale B (SINE A)   & Maths  8bit Operand   1B/W D
  dh 0   // M7B
  db 0   // M7B Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
M7C:     // $211D REG_M7C               MODE7 Rot/Scale C (SINE B)                           1B/W D
  dh 0   // M7C
  db 0   // M7C Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
M7D:     // $211E REG_M7D               MODE7 Rot/Scale D (COSINE B)                         1B/W D
  dh 0   // M7D
  db 0   // M7D Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
M7X:     // $211F REG_M7X               MODE7 Rot/Scale Center Coordinate X                  1B/W D
  dh 0   // M7X
  db 0   // M7X Flip Flop (0 = Lo Byte, 1 = Hi Byte)

align(2)
M7Y:     // $2120 REG_M7Y               MODE7 Rot/Scale Center Coordinate Y                  1B/W D
  dh 0   // M7Y
  db 0   // M7Y Flip Flop (0 = Lo Byte, 1 = Hi Byte)

CGADD:   // $2121 REG_CGADD             Palette CGRAM Address                                1B/W
  db 0   // CGADD

align(2)
CGDATA:  // $2122 REG_CGDATA            Palette CGRAM Data Write                             1B/W D
  dh 0   // CGDATA
  db 0   // CGDATA Flip Flop (0 = Lo Byte, 1 = Hi Byte)

W12SEL:  // $2123 REG_W12SEL            Window BG1/BG2  Mask Settings                        1B/W
  db 0   // W12SEL

W34SEL:  // $2124 REG_W34SEL            Window BG3/BG4  Mask Settings                        1B/W
  db 0   // W34SEL

WOBJSEL: // $2125 REG_WOBJSEL           Window OBJ/MATH Mask Settings                        1B/W
  db 0   // WOBJSEL

WH0:     // $2126 REG_WH0               Window 1 Left  Position (X1)                         1B/W
  db 0   // WH0

WH1:     // $2127 REG_WH1               Window 1 Right Position (X2)                         1B/W
  db 0   // WH1

WH2:     // $2128 REG_WH2               Window 2 Left  Position (X1)                         1B/W
  db 0   // WH2

WH3:     // $2129 REG_WH3               Window 2 Right Position (X2)                         1B/W
  db 0   // WH3

WBGLOG:  // $212A REG_WBGLOG            Window 1/2 Mask Logic (BG1-BG4)                      1B/W
  db 0   // WBGLOG

WOBJLOG: // $212B REG_WOBJLOG           Window 1/2 Mask Logic (OBJ/MATH)                     1B/W
  db 0   // WOBJLOG

TM:      // $212C REG_TM                Main Screen Designation                              1B/W
  db 0   // TM

TS:      // $212D REG_TS                Sub  Screen Designation                              1B/W
  db 0   // TS

TMW:     // $212E REG_TMW               Window Area Main Screen Disable                      1B/W
  db 0   // TMW

TSW:     // $212F REG_TSW               Window Area Sub  Screen Disable                      1B/W
  db 0   // TSW

CGWSEL:  // $2130 REG_CGWSEL            Color Math Control Register A                        1B/W
  db 0   // CGWSEL

CGADSUB: // $2131 REG_CGADSUB           Color Math Control Register B                        1B/W
  db 0   // CGADSUB

COLDATA: // $2132 REG_COLDATA           Color Math Sub Screen Backdrop Color                 1B/W
  db 0   // COLDATA

SETINI:  // $2133 REG_SETINI            Display Control 2                                    1B/W
  db 0   // SETINI

align(4)
WMADD:   // $2181..$2183 REG_VMADDL/M/H WRAM Address (Lower/Middle 8bit, Upper 1bit)         3B/W
  dw 0   // WMADD